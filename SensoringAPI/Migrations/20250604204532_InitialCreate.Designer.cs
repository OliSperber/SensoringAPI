// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SensoringAPI.Data;

#nullable disable

namespace SensoringAPI.Migrations
{
    [DbContext(typeof(WasteDetectionDBContext))]
    [Migration("20250604204532_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SensoringAPI.Models.WasteDetection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CameraId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Confidence")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WeatherCondition")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("WasteDetections");
                });

            modelBuilder.Entity("SensoringAPI.Models.WasteDetection", b =>
                {
                    b.OwnsOne("SensoringAPI.Models.LocationDto", "Location", b1 =>
                        {
                            b1.Property<int>("WasteDetectionId")
                                .HasColumnType("int");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("WasteDetectionId");

                            b1.ToTable("WasteDetections");

                            b1.WithOwner()
                                .HasForeignKey("WasteDetectionId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
